// 代码生成时间: 2025-08-26 13:13:24
# Server port
server.port=8080

# Database configuration
spring.datasource.url=jdbc:mysql://localhost:3306/inventory_db
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA properties
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
```

**2. InventoryApplication.java**
# NOTE: 重要实现细节
```java
# NOTE: 重要实现细节
package com.inventory;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class InventoryApplication {
    public static void main(String[] args) {
        SpringApplication.run(InventoryApplication.class, args);
    }
}
```

**3. InventoryController.java**
```java
package com.inventory.controller;

import org.springframework.web.bind.annotation.*;
import com.inventory.service.InventoryService;
import com.inventory.exception.ResourceNotFoundException;
# 增强安全性
import com.inventory.model.InventoryItem;
import org.springframework.http.ResponseEntity;

@RestController
@RequestMapping("/api/inventory")
public class InventoryController {
# FIXME: 处理边界情况
    private final InventoryService inventoryService;

    public InventoryController(InventoryService inventoryService) {
# 扩展功能模块
        this.inventoryService = inventoryService;
    }

    @GetMapping("/items")
    public ResponseEntity<?> getAllItems() {
        return ResponseEntity.ok(inventoryService.findAllItems());
    }

    @PostMapping("/item")
    public ResponseEntity<InventoryItem> createItem(@RequestBody InventoryItem item) {
        return ResponseEntity.ok(inventoryService.createItem(item));
    }
# 添加错误处理

    @PutMapping("/item/{id}")
# 扩展功能模块
    public ResponseEntity<InventoryItem> updateItem(@PathVariable Long id, @RequestBody InventoryItem item) {
        return ResponseEntity.ok(inventoryService.updateItem(id, item));
    }
# 优化算法效率

    @DeleteMapping("/item/{id}")
# 改进用户体验
    public ResponseEntity<?> deleteItem(@PathVariable Long id) {
# FIXME: 处理边界情况
        inventoryService.deleteItem(id);
        return ResponseEntity.ok().build();
# 增强安全性
    }
}
```

**4. InventoryService.java**
```java
package com.inventory.service;
# 添加错误处理

import com.inventory.model.InventoryItem;
import com.inventory.repository.InventoryRepository;
import com.inventory.exception.ResourceNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
# NOTE: 重要实现细节
import java.util.List;
import java.util.Optional;

@Service
public class InventoryService {
# 添加错误处理
    @Autowired
# 改进用户体验
    private InventoryRepository inventoryRepository;

    public List<InventoryItem> findAllItems() {
        return inventoryRepository.findAll();
    }

    public InventoryItem createItem(InventoryItem item) {
# 扩展功能模块
        return inventoryRepository.save(item);
    }
# NOTE: 重要实现细节

    public InventoryItem updateItem(Long id, InventoryItem itemDetails) {
        InventoryItem item = inventoryRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Inventory Item not found with id " + id));
        item.setName(itemDetails.getName());
# 优化算法效率
        item.setQuantity(itemDetails.getQuantity());
        return inventoryRepository.save(item);
    }

    public void deleteItem(Long id) {
# TODO: 优化性能
        InventoryItem item = inventoryRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Inventory Item not found with id " + id));
        inventoryRepository.delete(item);
    }
}
```

**5. InventoryRepository.java**
# TODO: 优化性能
```java
package com.inventory.repository;

import com.inventory.model.InventoryItem;
# TODO: 优化性能
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface InventoryRepository extends JpaRepository<InventoryItem, Long> {
}
```

**6. InventoryItem.java**
```java
package com.inventory.model;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
# 改进用户体验

@Entity
public class InventoryItem {
# FIXME: 处理边界情况
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;
    private String name;
    private int quantity;

    // Getters and setters
}
# 优化算法效率
```

**7. GlobalExceptionHandler.java**
```java
# 扩展功能模块
package com.inventory.exception;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

@ControllerAdvice
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {

    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<Object> handleResourceNotFoundException(ResourceNotFoundException ex, WebRequest request) {
        String bodyOfResponse = "Resource not found: " + ex.getMessage();
# 增强安全性
        return handleExceptionInternal(ex, bodyOfResponse,
                new HttpHeaders(), HttpStatus.NOT_FOUND, request);
    }
}
```

**8. ResourceNotFoundException.java**
```java
package com.inventory.exception;

public class ResourceNotFoundException extends RuntimeException {
    public ResourceNotFoundException(String message) {
        super(message);
    }
}